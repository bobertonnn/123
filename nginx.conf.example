# nginx.conf.example
# Пример конфигурации Nginx для вашего Next.js приложения
# Скопируйте этот файл или его содержимое в ваш файл конфигурации Nginx
# (например, /etc/nginx/sites-available/your-domain.com)

server {
    listen 80;
    # listen [::]:80; # для IPv6, если нужно

    server_name your-domain.com www.your-domain.com; # Замените на ваш домен

    # Для Let's Encrypt (certbot) - если вы будете его использовать для SSL
    # location ~ /.well-known/acme-challenge {
    #     allow all;
    #     root /var/www/html; # или другой путь, который использует certbot
    # }

    location / {
        proxy_pass http://localhost:3000; # Порт, на котором запущено ваше Next.js приложение (например, через PM2)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Увеличение таймаутов, если ваше приложение долго отвечает на некоторые запросы
        # proxy_connect_timeout 60s;
        # proxy_send_timeout 60s;
        # proxy_read_timeout 60s;
    }

    # Оптимизация: обслуживание статических файлов Next.js напрямую через Nginx
    # Это уменьшает нагрузку на Node.js сервер
    location /_next/static {
        alias /path/to/your-project-directory/.next/static; # Замените на реальный путь к вашему проекту
        expires 1y; # Кэширование на 1 год
        access_log off; # Отключить логирование для статики
        add_header Cache-Control "public";
    }

    location /static { # Если у вас есть папка public/static
        alias /path/to/your-project-directory/public/static; # Замените на реальный путь
        expires 1y;
        access_log off;
        add_header Cache-Control "public";
    }

    # (Опционально) Ограничение размера загружаемых файлов, если ваше приложение их принимает
    # client_max_body_size 100M;

    # (Опционально) Скрытие версии Nginx в ответах
    # server_tokens off;

    # (Опционально) Настройки для логов
    # access_log /var/log/nginx/your-domain.com.access.log;
    # error_log /var/log/nginx/your-domain.com.error.log;
}

# (Опционально) Конфигурация для HTTPS (после получения SSL-сертификата, например, с Certbot)
# Certbot обычно автоматически модифицирует этот файл или создает новый.
# Пример того, как это может выглядеть:
#
# server {
#     listen 443 ssl http2;
#     # listen [::]:443 ssl http2; # для IPv6
#     server_name your-domain.com www.your-domain.com;
#
#     ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf; # Рекомендованные настройки от Certbot
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # Рекомендованные настройки от Certbot
#
#     # Остальная конфигурация location / и т.д. как в блоке для HTTP
#     location / {
#         proxy_pass http://localhost:3000;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_cache_bypass $http_upgrade;
#     }
#
#     location /_next/static {
#         alias /path/to/your-project-directory/.next/static;
#         expires 1y;
#         access_log off;
#         add_header Cache-Control "public";
#     }
#
#     # (Опционально) Редирект с HTTP на HTTPS
#     # Если вы настраиваете SSL, обычно добавляют такой блок для HTTP:
#     # server {
#     #    listen 80;
#     #    server_name your-domain.com www.your-domain.com;
#     #    return 301 https://$host$request_uri;
#     # }
# }
